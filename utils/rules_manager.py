import discord
from discord.ext import commands
import json
import os
import logging

from utils.embed_manager import EmbedManager

logger = logging.getLogger('bot')

class RulesManager:
    CONFIG_FILE = 'data/rules_config.json'

    @staticmethod
    async def refresh_rules(bot: commands.Bot):
        """Rafra√Æchit le message des r√®gles sur tous les serveurs"""
        try:
            # Charger la configuration
            if not os.path.exists(RulesManager.CONFIG_FILE):
                logger.warning("‚ùå Fichier de configuration des r√®gles non trouv√©")
                return False

            if not os.path.exists(RulesManager.CONFIG_FILE):
                os.makedirs(os.path.dirname(RulesManager.CONFIG_FILE), exist_ok=True)
                with open(RulesManager.CONFIG_FILE, 'w') as f:
                    json.dump({
                        'rules_channel_id': None,
                        'rules_message_id': None,
                        'verified_role_id': None
                    }, f, indent=4)
                return False

            with open(RulesManager.CONFIG_FILE, 'r') as f:
                config = json.load(f)

            # Ajouter la cl√© verified_role_id si elle n'existe pas
            if 'verified_role_id' not in config:
                config['verified_role_id'] = None
                with open(RulesManager.CONFIG_FILE, 'w') as f:
                    json.dump(config, f, indent=4)

            rules_cog = bot.get_cog('RulesCommands')
            if rules_cog:
                rules_cog.rules_channel_id = config.get('rules_channel_id')
                rules_cog.rules_message_id = config.get('rules_message_id')
                rules_cog.verified_role_id = config.get('verified_role_id')
                
                if rules_cog.rules_channel_id:
                    for guild in bot.guilds:
                        channel = guild.get_channel(rules_cog.rules_channel_id)
                        if channel:
                            # Supprimer l'ancien message si existant
                            if rules_cog.rules_message_id:
                                try:
                                    old_msg = await channel.fetch_message(rules_cog.rules_message_id)
                                    await old_msg.delete()
                                except:
                                    pass

                            # Cr√©er nouveau message
                            embed = rules_cog.format_rules_embed(guild)
                            new_msg = await channel.send(embed=embed)
                            rules_cog.rules_message_id = new_msg.id
                            await new_msg.add_reaction("‚úÖ")

                            # Sauvegarder le nouvel ID
                            config['rules_message_id'] = new_msg.id
                            with open(RulesManager.CONFIG_FILE, 'w') as f:
                                json.dump(config, f, indent=4)

                            logger.info("‚úÖ Message de r√®glement mis √† jour")

            return True
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du rafra√Æchissement des r√®gles: {str(e)}")
            return False

    @staticmethod
    async def setup_default_role(guild: discord.Guild) -> discord.Role:
        """Cr√©e ou r√©cup√®re le r√¥le par d√©faut"""
        try:
            with open(RulesManager.CONFIG_FILE, 'r') as f:
                config = json.load(f)

            default_role_id = config.get('default_role_id')
            if default_role_id:
                role = guild.get_role(default_role_id)
                if role:
                    return role

            # Cr√©er un nouveau r√¥le avec des permissions limit√©es
            role = await guild.create_role(
                name="Nouveau Membre",
                color=discord.Color.lighter_grey(),
                reason="R√¥le par d√©faut pour les nouveaux membres"
            )

            # Configurer les permissions pour voir uniquement le salon des r√®gles
            for channel in guild.channels:
                if channel.id != config.get('rules_channel_id'):
                    await channel.set_permissions(role, view_channel=False)
                else:
                    await channel.set_permissions(role, view_channel=True, send_messages=False)

            # Sauvegarder l'ID
            config['default_role_id'] = role.id
            with open(RulesManager.CONFIG_FILE, 'w') as f:
                json.dump(config, f, indent=4)

            return role
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la cr√©ation du r√¥le par d√©faut: {str(e)}")
            return None

    @staticmethod
    async def should_send_welcome_dm(member: discord.Member) -> bool:
        """V√©rifie si on doit envoyer un message priv√© de bienvenue"""
        try:
            with open(RulesManager.CONFIG_FILE, 'r') as f:
                config = json.load(f)
            
            verified_role_id = config.get('verified_role_id')
            if verified_role_id:
                # Si le membre a d√©j√† le r√¥le v√©rifi√©, on ne lui envoie pas de message
                role = member.guild.get_role(int(verified_role_id))
                if role and role in member.roles:
                    logger.info(f"Le membre {member.name} a d√©j√† le r√¥le v√©rifi√©, pas de message de bienvenue")
                    return False
                
            return True
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification des r√¥les: {str(e)}")
            return False

    @staticmethod
    async def handle_rule_accept(member, role):
        """G√®re l'attribution du r√¥le et l'envoi du message lors de l'acceptation des r√®gles"""
        try:
            # V√©rifier si le membre a d√©j√† le r√¥le
            if role in member.roles:
                logger.info(f"Le membre {member.name} a d√©j√† le r√¥le {role.name}, pas de message envoy√©")
                return False
                
            # Retirer le r√¥le par d√©faut
            with open(RulesManager.CONFIG_FILE, 'r') as f:
                config = json.load(f)
            default_role_id = config.get('default_role_id')
            if default_role_id:
                default_role = member.guild.get_role(default_role_id)
                if default_role and default_role in member.roles:
                    await member.remove_roles(default_role)
                    logger.info(f"üîÑ R√¥le Nouveau Membre retir√© de {member.name}")
            
            # Ajouter le r√¥le v√©rifi√©
            await member.add_roles(role)
            
            # Cr√©er et envoyer l'embed de confirmation
            embed = discord.Embed(
                title="‚úÖ Acc√®s accord√© !",
                description=f"Bienvenue officiellement sur {member.guild.name} !\nTu as maintenant acc√®s √† l'ensemble du serveur.",
                color=discord.Color.green()
            )

            # Ajouter l'information sur les r√¥les
            roles_channel = discord.utils.get(member.guild.channels, name="roles-notifications")
            if roles_channel:
                embed.add_field(
                    name="üé≠ Attribution des R√¥les",
                    value=f"Rends-toi dans {roles_channel.mention} pour choisir tes r√¥les !",
                    inline=False
                )
            
            # Ajouter l'ic√¥ne du serveur si disponible
            if member.guild.icon:
                embed.set_thumbnail(url=member.guild.icon.url)

            await member.send(embed=embed)
            logger.info(f"‚úÖ R√¥le {role.name} ajout√© et message envoy√© √† {member.name}")
            
            return True
                
        except discord.Forbidden:
            logger.error(f"‚ùå Impossible d'envoyer un MP √† {member.name}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'attribution du r√¥le: {str(e)}")
            return False

    @staticmethod
    async def handle_rule_accept(member: discord.Member, verified_role: discord.Role):
        """G√®re l'acceptation des r√®gles par un membre"""
        try:
            # Retirer le r√¥le par d√©faut
            with open(RulesManager.CONFIG_FILE, 'r') as f:
                config = json.load(f)
            
            # Supprimer le r√¥le par d√©faut s'il existe
            default_role_id = config.get('default_role_id')
            if default_role_id:
                default_role = member.guild.get_role(default_role_id)
                if default_role and default_role in member.roles:
                    await member.remove_roles(default_role)
                    logger.info(f"üîÑ R√¥le par d√©faut retir√© de {member.name}")

            # Ajouter le r√¥le v√©rifi√©
            await member.add_roles(verified_role)
            
            # R√©cup√©rer le salon des r√¥les configur√©
            channel_config_file = 'data/channel_config.json'
            roles_channel = None
            
            if os.path.exists(channel_config_file):
                with open(channel_config_file, 'r') as f:
                    channel_config = json.load(f)
                    roles_channel_id = channel_config.get('channel_id')
                    if roles_channel_id:
                        roles_channel = member.guild.get_channel(roles_channel_id)

            # Cr√©er et envoyer l'embed de confirmation
            embed = discord.Embed(
                title="‚úÖ Acc√®s accord√© !",
                description=f"Bienvenue officiellement sur **{member.guild.name}** !\nTu as maintenant acc√®s √† l'ensemble du serveur.",
                color=discord.Color.green()
            )

            # Ajouter l'information sur les r√¥les avec le salon configur√©
            if roles_channel:
                embed.add_field(
                    name="üé≠ Attribution des R√¥les",
                    value=f"Rends-toi dans {roles_channel.mention} pour choisir tes r√¥les !",
                    inline=False
                )
            
            if member.guild.icon:
                embed.set_thumbnail(url=member.guild.icon.url)

            await member.send(embed=embed)
            logger.info(f"‚úÖ Acc√®s accord√© √† {member.name}")

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'attribution du r√¥le v√©rifi√©: {str(e)}")

__all__ = ['RulesManager']
