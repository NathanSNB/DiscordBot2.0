import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import Button, View, Select
import datetime
import typing
from utils.embed_manager import EmbedManager  # Importer l'EmbedManager

class HelpCategorySelect(discord.ui.Select):
    def __init__(self, cog_embeds: dict):
        self.cog_embeds = cog_embeds
        
        # Dictionnaire de correspondance entre les noms de cogs et des noms plus descriptifs avec √©mojis
        self.category_display_names = {
            # Commandes d'administration et mod√©ration
            "Commandes_Moderations": "üõ°Ô∏è Mod√©ration",
            "Commandes_Urgence": "üö® Urgence & S√©curit√©",
            "RulesCommands": "üìú R√®glement",
            "WhitelistCog": "üîë Permissions",
            
            # Utilitaires
            "Commandes_Webs": "üåê Outils Web",
            "MCStatusCommands": "üéÆ Status Minecraft",
            "YouTubeDownloader": "üì• YouTube",
            "ProfilePictureCog": "üñºÔ∏è Images de profil",
            "WikiCommands": "üìö Recherche Wiki",
            "CommandesG√©n√©rales": "üß∞ Outils g√©n√©raux",
            
            # Divertissement et m√©dias
            "Commandes_musicales": "üéµ Musique",
            
            # Syst√®mes
            "RoleManager": "üè∑Ô∏è Gestion des r√¥les",
            "StatsCommands": "üìä Statistiques",
            "tickets": "üé´ Syst√®me de tickets",
            "private_voice": "üîä Salons vocaux priv√©s",
            "BedtimeReminder": "‚è∞ Rappels",
            "Commandes_Economie": "üí∞ √âconomie",
            "ColorCommands": "üé® Apparence du bot",
            "compteur_membres": "üë• Compteur de Membres",            
            
            # Aide
            "HelpCog": "‚ùì Aide & Support",
        }
        
        # Organiser les cat√©gories par groupes pour une meilleure lisibilit√©
        category_groups = {
            "Administration": ["Commandes_Moderations", "Commandes_Urgence", "RulesCommands", "WhitelistCog"],
            "Utilitaires": ["CommandesG√©n√©rales", "Commandes_Webs", "MCStatusCommands", "YouTubeDownloader", "ProfilePictureCog", "WikiCommands"],
            "Divertissement": ["Commandes_musicales"],
            "Syst√®mes": ["StatsCommands", "Commandes_Economie", "RoleManager", "private_voice", "tickets", "BedtimeReminder", "ColorCommands", "compteur_membres"],  # Ajout du compteur_membres
            "Assistance": ["HelpCog"]
        }
        
        options = []
        # Ajouter l'option "Vue d'ensemble" (Accueil)
        options.append(
            discord.SelectOption(
                label="üìã Vue d'ensemble",
                description="Afficher toutes les cat√©gories disponibles",
                value="overview"
            )
        )
        
        # Ajouter les options par groupe
        for group_name, cog_names in category_groups.items():
            for cog_name in cog_names:
                if cog_name in self.cog_embeds:
                    display_name = self.category_display_names.get(cog_name, f"üìÅ {cog_name}")
                    options.append(
                        discord.SelectOption(
                            label=display_name,
                            description=f"Commandes {group_name.lower()}",
                            value=cog_name
                        )
                    )
        
        super().__init__(placeholder="üìã Choisir une cat√©gorie...", min_values=1, max_values=1, options=options)

    async def callback(self, interaction: discord.Interaction):
        # R√©cup√©rer l'embed correspondant √† la cat√©gorie s√©lectionn√©e
        selected_value = self.values[0]
        
        if selected_value == "overview":
            # Cr√©er une vue d'ensemble
            await self.show_overview(interaction)
            return
            
        # R√©cup√©rer et afficher l'embed de la cat√©gorie
        embed = self.cog_embeds[selected_value]
        
        # Mettre √† jour le titre de l'embed avec le nom am√©lior√©
        display_name = self.category_display_names.get(selected_value, f"üìÅ {selected_value}")
        embed.title = f"üìò {display_name}"
        
        await interaction.response.edit_message(embed=embed)
        
    async def show_overview(self, interaction: discord.Interaction):
        # Cr√©er un embed pour la vue d'ensemble
        embed = discord.Embed(
            title="üìö Menu d'aide de MathysieBot‚Ñ¢",
            description=(
                "Bienvenue dans le syst√®me d'aide de MathysieBot‚Ñ¢\n\n"
                "Utilisez le menu d√©roulant ci-dessous pour explorer les diff√©rentes cat√©gories de commandes."
            ),
            color=EmbedManager.get_default_color(),  # Utiliser la couleur d√©finie
            timestamp=datetime.datetime.now()
        )
        
        # Grouper les cat√©gories pour l'affichage
        category_groups = {
            "üõ°Ô∏è Administration": [],
            "üß∞ Utilitaires": [],
            "üéÆ Divertissement": [],
            "‚öôÔ∏è Syst√®mes": [],
            "‚ùì Aide": []
        }
        
        # R√©partir les cogs dans les groupes
        for cog_name in self.cog_embeds.keys():
            display_name = self.category_display_names.get(cog_name, f"üìÅ {cog_name}")
            
            if cog_name in ["Commandes_Moderations", "Commandes_Urgence", "RulesCommands", "WhitelistCog"]:
                category_groups["üõ°Ô∏è Administration"].append(display_name)
            elif cog_name in ["CommandesG√©n√©rales", "Commandes_Webs", "MCStatusCommands", "YouTubeDownloader", "ProfilePictureCog", "WikiCommands"]:
                category_groups["üß∞ Utilitaires"].append(display_name)
            elif cog_name in ["Commandes_musicales"]:
                category_groups["üéÆ Divertissement"].append(display_name)
            elif cog_name in ["StatsCommands", "Commandes_Economie", "RoleManager", "private_voice", "tickets", "BedtimeReminder", "ColorCommands", "compteur_membres"]:
                category_groups["‚öôÔ∏è Syst√®mes"].append(display_name)
            else:
                # Log pour identifier les cogs non class√©s
                print(f"Cog non class√©: {cog_name}")
                category_groups["‚ùì Aide"].append(display_name)
        
        # Ajouter chaque groupe √† l'embed
        for group_name, categories in category_groups.items():
            if categories:
                categories_text = "\n".join(f"‚Ä¢ {category}" for category in categories)
                embed.add_field(
                    name=f"‚îÅ‚îÅ‚îÅ {group_name} ‚îÅ‚îÅ‚îÅ",
                    value=categories_text,
                    inline=False
                )
        
        embed.set_footer(
            text="MathysieBot‚Ñ¢ ‚Ä¢ Utilisez le menu d√©roulant pour plus de d√©tails",
            icon_url=interaction.client.user.avatar.url if interaction.client.user.avatar else None
        )
        
        await interaction.response.edit_message(embed=embed)

class HelpMenu(discord.ui.View):
    def __init__(self, cog_embeds: dict, author: discord.User):
        super().__init__(timeout=60)
        self.cog_embeds = cog_embeds
        self.author = author
        self.message = None
        
        # Ajouter le s√©lecteur de cat√©gories
        self.add_item(HelpCategorySelect(cog_embeds))
        
        # Ajouter un bouton pour fermer le menu
        self.close_button = Button(label="Fermer", emoji="üö´", style=discord.ButtonStyle.red)
        self.close_button.callback = self.close_callback
        self.add_item(self.close_button)

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        # V√©rifier que c'est l'utilisateur ayant demand√© l'aide qui utilise le menu
        if interaction.user != self.author:
            await interaction.response.send_message("Tu ne peux pas utiliser ce menu d'aide.", ephemeral=True)
            return False
        return True
    
    async def close_callback(self, interaction: discord.Interaction):
        # Supprimer le message d'aide
        await interaction.message.delete()
        
    async def on_timeout(self):
        # D√©sactiver les items quand le timeout est atteint
        for child in self.children:
            child.disabled = True
            
        if self.message:
            try:
                await self.message.edit(view=self)
            except:
                pass

class HelpCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        
        # Descriptions personnalis√©es pour certaines cat√©gories
        self.category_descriptions = {
            "ColorCommands": (
                "Personnalisez l'apparence de votre bot en modifiant la couleur des embeds et du r√¥le d√©coratif.\n\n"
                "‚Ä¢ Changez les couleurs par code hexad√©cimal ou nom\n"
                "‚Ä¢ G√©rez le r√¥le d√©coratif du bot\n"
                "‚Ä¢ Synchronisez la couleur des menus avec le th√®me choisi"
            ),
            # Vous pouvez ajouter d'autres descriptions personnalis√©es ici
        }

    def get_command_signature(self, command):
        """Obtenir la signature format√©e d'une commande"""
        if not command.usage:
            return f"{self.bot.config.PREFIX}{command.qualified_name} {command.signature}"
        return f"{self.bot.config.PREFIX}{command.qualified_name} {command.usage}"

    @commands.command(name='help', aliases=['aide', 'h'])
    async def help_command(self, ctx, command_name: typing.Optional[str] = None):
        """Affiche les commandes disponibles et leur description"""
        if command_name:
            # Aide sp√©cifique √† une commande
            command = self.bot.get_command(command_name)
            if command:
                # V√©rifier que l'utilisateur a les permissions pour cette commande
                user_perms = self.bot.perm_manager.get_user_permissions(ctx.author.id)
                cmd_level = getattr(command, 'permission_level', None)
                if cmd_level is not None and cmd_level not in user_perms and 5 not in user_perms:
                    await ctx.send("‚ùå Vous n'avez pas acc√®s √† cette commande.")
                    return
                
                # Cr√©er un embed pour cette commande
                embed = discord.Embed(
                    title=f"üìñ Aide pour {command.name}",
                    description=command.help or "Aucune description disponible.",
                    color=EmbedManager.get_default_color(),  # Utiliser la couleur d√©finie
                    timestamp=datetime.datetime.now()
                )
                
                embed.add_field(name="Utilisation", value=f"`{self.get_command_signature(command)}`", inline=False)
                
                if command.aliases:
                    aliases = ", ".join([f"`{alias}`" for alias in command.aliases])
                    embed.add_field(name="Alias", value=aliases, inline=False)
                
                if hasattr(command, 'permission_level') and command.permission_level is not None:
                    embed.add_field(name="Niveau de permission", value=f"{command.permission_level}/5", inline=False)
                
                embed.set_footer(
                    text=f"MathysieBot‚Ñ¢ ‚Ä¢ {self.bot.config.PREFIX}help pour voir toutes les commandes",
                    icon_url=ctx.bot.user.avatar.url if ctx.bot.user.avatar else None
                )
                
                await ctx.send(embed=embed)
            else:
                await ctx.send(f"‚ùå La commande `{command_name}` n'existe pas.")
            return
            
        # Menu d'aide g√©n√©ral
        user_perms = self.bot.perm_manager.get_user_permissions(ctx.author.id)
        cog_embeds = {}  # Dictionnaire pour stocker les embeds par cat√©gorie

        # Debug - Afficher tous les cogs charg√©s
        print("Cogs actuellement charg√©s:")
        for cog_name in self.bot.cogs:
            print(f" - {cog_name}")

        # Pr√©parer les embeds pour chaque cat√©gorie
        for cog_name, cog in self.bot.cogs.items():
            available_commands = []
            for cmd in cog.get_commands():
                cmd_level = getattr(cmd, 'permission_level', None)
                if cmd_level is None or cmd_level in user_perms or 5 in user_perms:
                    available_commands.append(cmd)

            if not available_commands:
                continue

            # Utiliser une description personnalis√©e si elle existe, sinon utiliser une description g√©n√©rique
            custom_description = getattr(self, 'category_descriptions', {}).get(cog_name, "Liste des commandes disponibles dans cette cat√©gorie")
            
            embed = discord.Embed(
                title=f"üìò {cog_name}",
                description=custom_description,
                color=EmbedManager.get_default_color(),  # Utiliser la couleur d√©finie
                timestamp=datetime.datetime.now()
            )

            total_commands = len([cmd for cmd in self.bot.commands])
            available_count = len(available_commands)
            
            stats = (
                "```yaml\n"
                "# Informations #\n"
                f"Commandes disponibles : {available_count}/{total_commands}\n"
                f"Niveau d'acc√®s : {max(user_perms) if user_perms else 0}/5\n"
                "```"
            )
            
            embed.add_field(name="", value=stats, inline=False)
            embed.add_field(name="", value="‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ Commandes ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", inline=False)

            for command in available_commands:
                level_txt = ""
                if hasattr(command, 'permission_level'):
                    level = getattr(command, 'permission_level')
                    if level is not None:
                        level_txt = f"[Niveau {level}] "

                help_text = command.help or 'Pas de description.'
                signature = self.get_command_signature(command)
                
                name = f"`{signature}`"
                value = f"{level_txt}{help_text}"

                embed.add_field(name=name, value=value, inline=False)

            embed.set_footer(
                text="MathysieBot‚Ñ¢",
                icon_url=ctx.bot.user.avatar.url if ctx.bot.user.avatar else None
            )

            cog_embeds[cog_name] = embed

        if not cog_embeds:
            return await ctx.send("Aucune commande trouv√©e.")

        # Cr√©er un embed pour la vue d'ensemble
        menu_embed = discord.Embed(
            title="üìö Menu d'aide de MathysieBot‚Ñ¢",
            description=(
                "Bienvenue dans le syst√®me d'aide de MathysieBot‚Ñ¢\n\n"
                "Utilisez le menu d√©roulant ci-dessous pour explorer les diff√©rentes cat√©gories de commandes."
            ),
            color=EmbedManager.get_default_color(),  # Utiliser la couleur d√©finie
            timestamp=datetime.datetime.now()
        )
        
        category_display_names = {
            "Commandes_Moderations": "üõ°Ô∏è Mod√©ration",
            "Commandes_Urgence": "üö® Urgence & S√©curit√©",
            "RulesCommands": "üìú R√®glement",
            "WhitelistCog": "üîë Permissions",
            "Commandes_Webs": "üåê Outils Web",
            "MCStatusCommands": "üéÆ Status Minecraft",
            "YouTubeDownloader": "üì• YouTube",
            "ProfilePictureCog": "üñºÔ∏è Images de profil",
            "WikiCommands": "üìö Recherche Wiki",
            "CommandesG√©n√©rales": "üß∞ Outils g√©n√©raux",
            "Commandes_musicales": "üéµ Musique",
            "RoleManager": "üè∑Ô∏è Gestion des r√¥les",
            "StatsCommands": "üìä Statistiques",
            "tickets": "üé´ Syst√®me de tickets",
            "private_voice": "üîä Salons vocaux priv√©s",
            "BedtimeReminder": "‚è∞ Rappels",
            "Commandes_Economie": "üí∞ √âconomie",
            "ColorCommands": "üé® Apparence du bot",  # Modifi√© pour mieux refl√©ter le r√¥le
            "HelpCog": "‚ùì Aide & Support",
        }
        
        # Grouper les cat√©gories 
        category_groups = {
            "üõ°Ô∏è Administration": [],
            "üß∞ Utilitaires": [],
            "üéÆ Divertissement": [],
            "‚öôÔ∏è Syst√®mes": [],
            "‚ùì Aide": []
        }
        
        # R√©partir les cogs dans les groupes
        for cog_name in cog_embeds.keys():
            display_name = category_display_names.get(cog_name, f"üìÅ {cog_name}")
            
            if cog_name in ["Commandes_Moderations", "Commandes_Urgence", "RulesCommands", "WhitelistCog"]:
                category_groups["üõ°Ô∏è Administration"].append(display_name)
            elif cog_name in ["CommandesG√©n√©rales", "Commandes_Webs", "MCStatusCommands", "YouTubeDownloader", "ProfilePictureCog", "WikiCommands"]:
                category_groups["üß∞ Utilitaires"].append(display_name)
            elif cog_name in ["Commandes_musicales"]:
                category_groups["üéÆ Divertissement"].append(display_name)
            elif cog_name in ["StatsCommands", "Commandes_Economie", "RoleManager", "private_voice", "tickets", "BedtimeReminder", "ColorCommands", "compteur_membres"]:
                category_groups["‚öôÔ∏è Syst√®mes"].append(display_name)
            else:
                # Log pour identifier les cogs non class√©s
                print(f"Cog non class√©: {cog_name}")
                category_groups["‚ùì Aide"].append(display_name)
        
        # Ajouter chaque groupe √† l'embed
        for group_name, categories in category_groups.items():
            if categories:
                categories_text = "\n".join(f"‚Ä¢ {category}" for category in categories)
                menu_embed.add_field(
                    name=f"‚îÅ‚îÅ‚îÅ {group_name} ‚îÅ‚îÅ‚îÅ",
                    value=categories_text,
                    inline=False
                )
        
        menu_embed.set_thumbnail(url=ctx.bot.user.avatar.url if ctx.bot.user.avatar else None)
        menu_embed.set_footer(
            text="MathysieBot‚Ñ¢ ‚Ä¢ Utilisez le menu d√©roulant pour plus de d√©tails",
            icon_url=ctx.bot.user.avatar.url if ctx.bot.user.avatar else None
        )

        # Cr√©er la vue avec le menu d√©roulant
        view = HelpMenu(cog_embeds, ctx.author)
        message = await ctx.send(embed=menu_embed, view=view)
        view.message = message  # Pour pouvoir d√©sactiver les boutons apr√®s timeout

    @app_commands.command(name="help", description="Affiche l'aide du bot")
    async def help_slash(self, interaction: discord.Interaction, commande: str = None):
        """Affiche le menu d'aide (version slash command)"""
        if commande:
            # Aide sp√©cifique √† une commande
            command = self.bot.get_command(commande)
            if command:
                # V√©rifier que l'utilisateur a les permissions pour cette commande
                user_perms = self.bot.perm_manager.get_user_permissions(interaction.user.id)
                cmd_level = getattr(command, 'permission_level', None)
                if cmd_level is not None and cmd_level not in user_perms and 5 not in user_perms:
                    await interaction.response.send_message("‚ùå Vous n'avez pas acc√®s √† cette commande.", ephemeral=True)
                    return
                
                # Cr√©er un embed pour cette commande
                embed = discord.Embed(
                    title=f"üìñ Aide pour {command.name}",
                    description=command.help or "Aucune description disponible.",
                    color=EmbedManager.get_default_color(),  # Utiliser la couleur d√©finie
                    timestamp=datetime.datetime.now()
                )
                
                embed.add_field(name="Utilisation", value=f"`{self.get_command_signature(command)}`", inline=False)
                
                if command.aliases:
                    aliases = ", ".join([f"`{alias}`" for alias in command.aliases])
                    embed.add_field(name="Alias", value=aliases, inline=False)
                
                if hasattr(command, 'permission_level') and command.permission_level is not None:
                    embed.add_field(name="Niveau de permission", value=f"{command.permission_level}/5", inline=False)
                
                embed.set_footer(
                    text=f"MathysieBot‚Ñ¢ ‚Ä¢ /help pour voir toutes les commandes",
                    icon_url=interaction.client.user.avatar.url if interaction.client.user.avatar else None
                )
                
                await interaction.response.send_message(embed=embed, ephemeral=True)
            else:
                await interaction.response.send_message(f"‚ùå La commande `{commande}` n'existe pas.", ephemeral=True)
            return
            
        # Menu d'aide g√©n√©ral (identique √† la version commande classique)
        user_perms = self.bot.perm_manager.get_user_permissions(interaction.user.id)
        cog_embeds = {}  # Dictionnaire pour stocker les embeds par cat√©gorie

        # M√™me logique que dans help_command pour g√©n√©rer les embeds
        # Code similaire mais adapt√© pour app_commands
        for cog_name, cog in self.bot.cogs.items():
            available_commands = []
            for cmd in cog.get_commands():
                cmd_level = getattr(cmd, 'permission_level', None)
                if cmd_level is None or cmd_level in user_perms or 5 in user_perms:
                    available_commands.append(cmd)

            if not available_commands:
                continue

            # Utiliser une description personnalis√©e si elle existe, sinon utiliser une description g√©n√©rique
            custom_description = getattr(self, 'category_descriptions', {}).get(cog_name, "Liste des commandes disponibles dans cette cat√©gorie")
            
            embed = discord.Embed(
                title=f"üìò {cog_name}",
                description=custom_description,
                color=EmbedManager.get_default_color(),  # Utiliser la couleur d√©finie
                timestamp=datetime.datetime.now()
            )

            total_commands = len([cmd for cmd in self.bot.commands])
            available_count = len(available_commands)
            
            stats = (
                "```yaml\n"
                "# Informations #\n"
                f"Commandes disponibles : {available_count}/{total_commands}\n"
                f"Niveau d'acc√®s : {max(user_perms) if user_perms else 0}/5\n"
                "```"
            )
            
            embed.add_field(name="", value=stats, inline=False)
            embed.add_field(name="", value="‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ Commandes ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", inline=False)

            for command in available_commands:
                level_txt = ""
                if hasattr(command, 'permission_level'):
                    level = getattr(command, 'permission_level')
                    if level is not None:
                        level_txt = f"[Niveau {level}] "

                help_text = command.help or 'Pas de description.'
                signature = self.get_command_signature(command)
                
                name = f"`{signature}`"
                value = f"{level_txt}{help_text}"

                embed.add_field(name=name, value=value, inline=False)

            embed.set_footer(
                text="MathysieBot‚Ñ¢",
                icon_url=interaction.client.user.avatar.url if interaction.client.user.avatar else None
            )

            cog_embeds[cog_name] = embed
            
        if not cog_embeds:
            await interaction.response.send_message("Aucune commande trouv√©e.", ephemeral=True)
            return

        # Cr√©er un embed pour la vue d'ensemble identique √† celui de la commande classique
        menu_embed = discord.Embed(
            title="üìö Menu d'aide de MathysieBot‚Ñ¢",
            description=(
                "Bienvenue dans le syst√®me d'aide de MathysieBot‚Ñ¢\n\n"
                "Utilisez le menu d√©roulant ci-dessous pour explorer les diff√©rentes cat√©gories de commandes."
            ),
            color=EmbedManager.get_default_color(),  # Utiliser la couleur d√©finie
            timestamp=datetime.datetime.now()
        )
        
        category_display_names = {
            "Commandes_Moderations": "üõ°Ô∏è Mod√©ration",
            "Commandes_Urgence": "üö® Urgence & S√©curit√©",
            "RulesCommands": "üìú R√®glement",
            "WhitelistCog": "üîë Permissions",
            "Commandes_Webs": "üåê Outils Web",
            "MCStatusCommands": "üéÆ Status Minecraft",
            "YouTubeDownloader": "üì• YouTube",
            "ProfilePictureCog": "üñºÔ∏è Images de profil",
            "WikiCommands": "üìö Recherche Wiki",
            "CommandesG√©n√©rales": "üß∞ Outils g√©n√©raux",
            "Commandes_musicales": "üéµ Musique",
            "RoleManager": "üè∑Ô∏è Gestion des r√¥les",
            "StatsCommands": "üìä Statistiques",
            "tickets": "üé´ Syst√®me de tickets",
            "private_voice": "üîä Salons vocaux priv√©s",
            "BedtimeReminder": "‚è∞ Rappels",
            "Commandes_Economie": "üí∞ √âconomie",
            "ColorCommands": "üé® Apparence du bot",  # Modifi√© pour mieux refl√©ter le r√¥le
            "HelpCog": "‚ùì Aide & Support",
        }
        
        # Grouper les cat√©gories 
        category_groups = {
            "üõ°Ô∏è Administration": [],
            "üß∞ Utilitaires": [],
            "üéÆ Divertissement": [],
            "‚öôÔ∏è Syst√®mes": [],
            "‚ùì Aide": []
        }
        
        # R√©partir les cogs
        for cog_name in cog_embeds.keys():
            display_name = category_display_names.get(cog_name, f"üìÅ {cog_name}")
            
            if cog_name in ["Commandes_Moderations", "Commandes_Urgence", "RulesCommands", "WhitelistCog"]:
                category_groups["üõ°Ô∏è Administration"].append(display_name)
            elif cog_name in ["CommandesG√©n√©rales", "Commandes_Webs", "MCStatusCommands", "YouTubeDownloader", "ProfilePictureCog", "WikiCommands"]:
                category_groups["üß∞ Utilitaires"].append(display_name)
            elif cog_name in ["Commandes_musicales"]:
                category_groups["üéÆ Divertissement"].append(display_name)
            elif cog_name in ["StatsCommands", "Commandes_Economie", "RoleManager", "private_voice", "tickets", "BedtimeReminder", "ColorCommands", "compteur_membres"]:
                category_groups["‚öôÔ∏è Syst√®mes"].append(display_name)
            else:
                # Log pour identifier les cogs non class√©s
                print(f"Cog non class√©: {cog_name}")
                category_groups["‚ùì Aide"].append(display_name)
        
        # Ajouter chaque groupe √† l'embed
        for group_name, categories in category_groups.items():
            if categories:
                categories_text = "\n".join(f"‚Ä¢ {category}" for category in categories)
                menu_embed.add_field(
                    name=f"‚îÅ‚îÅ‚îÅ {group_name} ‚îÅ‚îÅ‚îÅ",
                    value=categories_text,
                    inline=False
                )
        
        menu_embed.set_thumbnail(url=interaction.client.user.avatar.url if interaction.client.user.avatar else None)
        menu_embed.set_footer(
            text="MathysieBot‚Ñ¢ ‚Ä¢ Utilisez le menu d√©roulant pour plus de d√©tails",
            icon_url=interaction.client.user.avatar.url if interaction.client.user.avatar else None
        )

        # Cr√©er la vue avec le menu d√©roulant
        view = HelpMenu(cog_embeds, interaction.user)
        await interaction.response.send_message(embed=menu_embed, view=view, ephemeral=True)
        # On ne peut pas r√©cup√©rer le message apr√®s interaction.response.send_message avec ephemeral=True

async def setup(bot):
    await bot.add_cog(HelpCog(bot))
    # Supprimer l'ancienne cog d'aide si elle existe
    old_cog_path = "cogs.help"
    try:
        await bot.unload_extension(old_cog_path)
        print("üîÑ Ancienne cog d'aide d√©charg√©e")
    except:
        pass
    print("‚úÖ Module d'aide charg√© avec succ√®s")
