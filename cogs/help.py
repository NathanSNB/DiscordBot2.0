import discord
from discord import app_commands
from discord.ext import commands
from discord.ui import Button, View, Select
import typing
import datetime

from utils.embed_manager import EmbedManager


class HelpView(View):
    def __init__(self, bot, author, timeout=60):
        super().__init__(timeout=timeout)
        self.bot = bot
        self.author = author
        self.current_page = "main"

        # Cr√©ation du menu d√©roulant pour les cat√©gories
        self.category_select = Select(
            placeholder="S√©lectionnez une cat√©gorie...",
            options=[
                discord.SelectOption(
                    label="Accueil",
                    emoji="üè†",
                    value="main",
                    description="Page principale d'aide",
                ),
                discord.SelectOption(
                    label="Administration",
                    emoji="üõ°Ô∏è",
                    value="admin",
                    description="Commandes d'administration et mod√©ration",
                ),
                discord.SelectOption(
                    label="Utilitaires",
                    emoji="üß∞",
                    value="util",
                    description="Outils utiles pour votre serveur",
                ),
                discord.SelectOption(
                    label="Divertissement",
                    emoji="üéÆ",
                    value="fun",
                    description="Commandes de divertissement",
                ),
                discord.SelectOption(
                    label="Syst√®mes",
                    emoji="‚öôÔ∏è",
                    value="systems",
                    description="Syst√®mes automatis√©s du bot",
                ),
                discord.SelectOption(
                    label="Aide",
                    emoji="‚ùì",
                    value="help",
                    description="Commandes d'aide et support",
                ),
            ],
        )
        self.category_select.callback = self.select_callback
        self.add_item(self.category_select)

        # Bouton pour fermer le menu
        self.close_button = Button(
            label="Fermer", emoji="üö´", style=discord.ButtonStyle.red
        )
        self.close_button.callback = self.close_callback
        self.add_item(self.close_button)

    async def interaction_check(self, interaction):
        # S'assurer que seul l'utilisateur qui a demand√© l'aide peut interagir
        return interaction.user.id == self.author.id

    async def select_callback(self, interaction):
        selected = self.category_select.values[0]
        self.current_page = selected

        if selected == "main":
            embed = create_main_help_embed(self.bot)
        elif selected == "admin":
            embed = create_category_embed(
                self.bot,
                "Administration",
                "üõ°Ô∏è",
                [
                    "Commandes_Moderations",
                    "Commandes_Urgence",
                    "RulesCommands",
                    "WhitelistCog",
                ],
            )
        elif selected == "util":
            embed = create_category_embed(
                self.bot,
                "Utilitaires",
                "üß∞",
                [
                    "CommandesG√©n√©rales",
                    "Commandes_Webs",
                    "MCStatusCommands",
                    "YouTubeDownloader",
                    "ProfilePictureCog",
                    "WikiCommands",
                ],
            )
        elif selected == "fun":
            embed = create_category_embed(
                self.bot, "Divertissement", "üéÆ", ["Commandes_musicales"]
            )
        elif selected == "systems":
            embed = create_category_embed(
                self.bot,
                "Syst√®mes",
                "‚öôÔ∏è",
                [
                    "StatsCommands",
                    "BedtimeReminder",
                    "Commandes_Economie",
                    "RoleManager",
                    "private_voice",
                    "tickets",
                ],
            )
        elif selected == "help":
            embed = create_category_embed(self.bot, "Aide", "‚ùì", ["HelpCog"])

        await interaction.response.edit_message(embed=embed, view=self)

    async def close_callback(self, interaction):
        await interaction.response.defer()
        await interaction.delete_original_response()


def create_main_help_embed(bot):
    """Cr√©e l'embed principal d'aide avec un style professionnel"""
    fields = [
        {
            "name": f"{EmbedManager.EMOJIS['shield']} Administration",
            "value": "‚Ä¢ Commandes_Moderations\n‚Ä¢ Commandes_Urgence\n‚Ä¢ RulesCommands\n‚Ä¢ WhitelistCog",
            "inline": True,
        },
        {
            "name": f"{EmbedManager.EMOJIS['tools']} Utilitaires",
            "value": "‚Ä¢ CommandesG√©n√©rales\n‚Ä¢ Commandes_Webs\n‚Ä¢ MCStatusCommands\n‚Ä¢ YouTubeDownloader\n‚Ä¢ ProfilePictureCog\n‚Ä¢ WikiCommands",
            "inline": True,
        },
        {
            "name": f"{EmbedManager.EMOJIS['game']} Divertissement",
            "value": "‚Ä¢ Commandes_musicales",
            "inline": True,
        },
        {
            "name": f"{EmbedManager.EMOJIS['settings']} Syst√®mes",
            "value": "‚Ä¢ StatsCommands\n‚Ä¢ BedtimeReminder\n‚Ä¢ Commandes_Economie\n‚Ä¢ RoleManager\n‚Ä¢ private_voice",
            "inline": True,
        },
        {
            "name": f"{EmbedManager.EMOJIS['info']} Information",
            "value": f"**Pr√©fixe:** `{bot.config.PREFIX}`\n**S√©lectionnez une cat√©gorie** dans le menu d√©roulant pour plus de d√©tails",
            "inline": False,
        },
    ]

    embed = EmbedManager.create_professional_embed(
        title="Menu d'aide principal",
        description="Bienvenue dans le syst√®me d'aide de MathysieBot‚Ñ¢\n\nUtilisez le menu d√©roulant ci-dessous pour explorer les diff√©rentes cat√©gories de commandes.",
        embed_type="help",
        fields=fields,
        thumbnail=bot.user.display_avatar.url,
    )

    return embed

    embed.add_field(
        name="‚îÅ‚îÅ‚îÅ ‚öôÔ∏è Syst√®mes ‚îÅ‚îÅ‚îÅ",
        value="‚Ä¢ StatsCommands\n‚Ä¢ BedtimeReminder\n‚Ä¢ Commandes_Economie\n‚Ä¢ RoleManager\n‚Ä¢ private_voice\n‚Ä¢ tickets",
        inline=False,
    )

    embed.add_field(name="‚îÅ‚îÅ‚îÅ ‚ùì Aide ‚îÅ‚îÅ‚îÅ", value="‚Ä¢ HelpCog", inline=False)

    embed.set_thumbnail(url=bot.user.display_avatar.url)
    return embed


def create_category_embed(bot, category, emoji, modules_list):
    """Cr√©e un embed professionnel pour une cat√©gorie de commandes"""
    fields = []

    for module in modules_list:
        commands_list = []
        for command in bot.commands:
            cog_name = command.cog_name if command.cog else "Sans cat√©gorie"
            if cog_name == module:
                usage = f"{bot.config.PREFIX}{command.name}"
                if command.usage:
                    usage += f" {command.usage}"
                commands_list.append(
                    f"‚Ä¢ `{usage}`: {command.help or 'Aucune description'}"
                )

        # Si aucune commande n'est trouv√©e, afficher un message par d√©faut
        description = (
            "\n".join(commands_list[:5])  # Limiter √† 5 commandes par module
            if commands_list
            else "*Module sans commandes ou non charg√©*"
        )

        if commands_list and len(commands_list) > 5:
            description += f"\n*... et {len(commands_list) - 5} autres commandes*"

        fields.append(
            {
                "name": f"{EmbedManager.EMOJIS['folder']} {module}",
                "value": description,
                "inline": False,
            }
        )

    embed = EmbedManager.create_professional_embed(
        title=f"Commandes {category}",
        description=f"Voici les modules disponibles dans la cat√©gorie {category}.\n"
        f"Utilisez `{bot.config.PREFIX}help [commande]` pour plus d'informations sur une commande sp√©cifique.",
        embed_type="help",
        fields=fields,
        thumbnail=bot.user.display_avatar.url,
    )

    return embed


class HelpCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="help", aliases=["aide", "h"])
    async def help_command(self, ctx, command: typing.Optional[str] = None):
        """Affiche ce message d'aide"""

        if command:
            # Afficher l'aide pour une commande sp√©cifique
            cmd = self.bot.get_command(command)
            if cmd:
                usage = f"{self.bot.config.PREFIX}{cmd.name}"
                if cmd.usage:
                    usage += f" {cmd.usage}"

                fields = [
                    {
                        "name": f"{EmbedManager.EMOJIS['page']} Utilisation",
                        "value": f"`{usage}`",
                        "inline": False,
                    },
                    {
                        "name": f"{EmbedManager.EMOJIS['info']} Description",
                        "value": cmd.help or "Aucune description disponible",
                        "inline": False,
                    },
                ]

                if cmd.aliases:
                    aliases = ", ".join([f"`{alias}`" for alias in cmd.aliases])
                    fields.append(
                        {
                            "name": f"{EmbedManager.EMOJIS['bookmark']} Alias",
                            "value": aliases,
                            "inline": False,
                        }
                    )

                embed = EmbedManager.create_command_embed(
                    command_name=cmd.name,
                    description=cmd.help or "Aucune description disponible",
                    usage=usage,
                    examples=[f"{usage}"] if cmd.usage else None,
                )

                await ctx.send(embed=embed)
            else:
                error_embed = EmbedManager.create_error_embed(
                    title="Commande introuvable",
                    description=f"La commande `{command}` n'existe pas.",
                )
                await ctx.send(embed=error_embed)
        else:
            # Afficher le menu d'aide principal
            embed = create_main_help_embed(self.bot)
            view = HelpView(self.bot, ctx.author)
            await ctx.send(embed=embed, view=view)

    @app_commands.command(name="help", description="Affiche l'aide du bot")
    async def help_slash(self, interaction: discord.Interaction):
        """Affiche le menu d'aide (version slash command)"""
        embed = create_main_help_embed(self.bot)
        view = HelpView(self.bot, interaction.user)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


async def setup(bot):
    await bot.add_cog(HelpCommands(bot))
